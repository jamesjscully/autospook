###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
import baml_py
from enum import Enum

from pydantic import BaseModel, ConfigDict

from typing_extensions import TypeAlias, Literal
from typing import Dict, Generic, List, Optional, TypeVar, Union


T = TypeVar('T')
CheckName = TypeVar('CheckName', bound=str)

class Check(BaseModel):
    name: str
    expression: str
    status: str
class Checked(BaseModel, Generic[T,CheckName]):
    value: T
    checks: Dict[CheckName, Check]

def get_checks(checks: Dict[CheckName, Check]) -> List[Check]:
    return list(checks.values())

def all_succeeded(checks: Dict[CheckName, Check]) -> bool:
    return all(check.status == "succeeded" for check in get_checks(checks))



class Criticality(str, Enum):
    
    SECURITY_CRITICAL = "SECURITY_CRITICAL"
    CONTEXTUAL = "CONTEXTUAL"

class QuestionLabel(str, Enum):
    
    OPEN = "OPEN"
    CLOSED = "CLOSED"
    UNANSWERABLE = "UNANSWERABLE"

class TopicCompletion(str, Enum):
    
    OPEN = "OPEN"
    SATISFIED = "SATISFIED"
    UNSATISFIABLE = "UNSATISFIABLE"

class EvidenceSnippet(BaseModel):
    title: str
    url: str
    snippet: str
    published_date: Optional[str] = None

class ExaResult(BaseModel):
    id: str
    title: str
    url: str
    score: Optional[float] = None
    published_date: Optional[str] = None
    text: Optional[str] = None

class ExaSearchResults(BaseModel):
    query: str
    num_results: int
    results: List["ExaResult"]

class HtmlReport(BaseModel):
    html: str

class Question(BaseModel):
    text: str
    criticality: "Criticality"

class QuestionStatus(BaseModel):
    question: "Question"
    label: "QuestionLabel"
    rationale: str
    evidence: Optional[List["EvidenceSnippet"]] = None

class Stepback(BaseModel):
    expanded_context: str

class TopicStatus(BaseModel):
    topic: str
    completion: "TopicCompletion"
    rationale: str
