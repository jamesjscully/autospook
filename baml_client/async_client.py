###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
from typing import Dict, List, Optional, TypeVar, Union, cast
from typing_extensions import Literal

import baml_py

from . import _baml
from ._baml import BamlCallOptions
from .types import Checked, Check
from .parser import LlmResponseParser, LlmStreamParser
from .async_request import AsyncHttpRequest, AsyncHttpStreamRequest
from .globals import DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_CTX, DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME


OutputType = TypeVar('OutputType')


class BamlAsyncClient:
    __runtime: baml_py.BamlRuntime
    __ctx_manager: baml_py.BamlCtxManager
    __stream_client: "BamlStreamClient"
    __http_request: AsyncHttpRequest
    __http_stream_request: AsyncHttpStreamRequest
    __llm_response_parser: LlmResponseParser
    __llm_stream_parser: LlmStreamParser
    __baml_options: _baml.BamlCallOptions

    def __init__(self, runtime: baml_py.BamlRuntime, ctx_manager: baml_py.BamlCtxManager, baml_options: Optional[_baml.BamlCallOptions] = None):
      self.__runtime = runtime
      self.__ctx_manager = ctx_manager
      self.__stream_client = BamlStreamClient(self.__runtime, self.__ctx_manager, baml_options)
      self.__http_request = AsyncHttpRequest(self.__runtime, self.__ctx_manager)
      self.__http_stream_request = AsyncHttpStreamRequest(self.__runtime, self.__ctx_manager)
      self.__llm_response_parser = LlmResponseParser(self.__runtime, self.__ctx_manager)
      self.__llm_stream_parser = LlmStreamParser(self.__runtime, self.__ctx_manager)
      self.__baml_options = baml_options or {}

    def with_options(
      self,
      tb: Optional[_baml.type_builder.TypeBuilder] = None,
      client_registry: Optional[baml_py.baml_py.ClientRegistry] = None,
      collector: Optional[Union[baml_py.baml_py.Collector, List[baml_py.baml_py.Collector]]] = None,
      env: Optional[Dict[str, Optional[str]]] = None,
    ) -> "BamlAsyncClient":
      """
      Returns a new instance of BamlAsyncClient with explicitly typed baml options
      for Python 3.8 compatibility.
      """
      new_options = self.__baml_options.copy()

      # Override if any keyword arguments were provided.
      if tb is not None:
          new_options["tb"] = tb
      if client_registry is not None:
          new_options["client_registry"] = client_registry
      if collector is not None:
          new_options["collector"] = collector
      if env is not None:
          new_options["env"] = env

      return BamlAsyncClient(self.__runtime, self.__ctx_manager, new_options)

    @property
    def stream(self):
      return self.__stream_client

    @property
    def request(self):
      return self.__http_request

    @property
    def stream_request(self):
      return self.__http_stream_request

    @property
    def parse(self):
      return self.__llm_response_parser

    @property
    def parse_stream(self):
      return self.__llm_stream_parser

    
    async def AssessRisk(
        self,
        report_html: str,
        baml_options: _baml.BamlCallOptions = {},
    ) -> str:
      options: _baml.BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      env = _baml.env_vars_to_dict(options.get("env", {}))
      raw = await self.__runtime.call_function(
        "AssessRisk",
        {
          "report_html": report_html,
        },
        self.__ctx_manager.clone_context(),
        tb,
        __cr__,
        collectors,
        env,
      )
      return cast(str, raw.cast_to(_baml.types, _baml.types, _baml.partial_types, False))
    
    async def EvaluateQuestion(
        self,
        question: _baml.types.Question,evidence: Optional[List[_baml.types.EvidenceSnippet]],expanded_context: str,topic: str,
        baml_options: _baml.BamlCallOptions = {},
    ) -> _baml.types.QuestionStatus:
      options: _baml.BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      env = _baml.env_vars_to_dict(options.get("env", {}))
      raw = await self.__runtime.call_function(
        "EvaluateQuestion",
        {
          "question": question,"evidence": evidence,"expanded_context": expanded_context,"topic": topic,
        },
        self.__ctx_manager.clone_context(),
        tb,
        __cr__,
        collectors,
        env,
      )
      return cast(_baml.types.QuestionStatus, raw.cast_to(_baml.types, _baml.types, _baml.partial_types, False))
    
    async def EvaluateTopic(
        self,
        topic: str,question_statuses: List[_baml.types.QuestionStatus],
        baml_options: _baml.BamlCallOptions = {},
    ) -> _baml.types.TopicStatus:
      options: _baml.BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      env = _baml.env_vars_to_dict(options.get("env", {}))
      raw = await self.__runtime.call_function(
        "EvaluateTopic",
        {
          "topic": topic,"question_statuses": question_statuses,
        },
        self.__ctx_manager.clone_context(),
        tb,
        __cr__,
        collectors,
        env,
      )
      return cast(_baml.types.TopicStatus, raw.cast_to(_baml.types, _baml.types, _baml.partial_types, False))
    
    async def GenerateQueries(
        self,
        question: _baml.types.Question,expanded_context: str,topic: str,previous_queries: Optional[List[str]],
        baml_options: _baml.BamlCallOptions = {},
    ) -> List[str]:
      options: _baml.BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      env = _baml.env_vars_to_dict(options.get("env", {}))
      raw = await self.__runtime.call_function(
        "GenerateQueries",
        {
          "question": question,"expanded_context": expanded_context,"topic": topic,"previous_queries": previous_queries,
        },
        self.__ctx_manager.clone_context(),
        tb,
        __cr__,
        collectors,
        env,
      )
      return cast(List[str], raw.cast_to(_baml.types, _baml.types, _baml.partial_types, False))
    
    async def GenerateQuestions(
        self,
        topic: str,expanded_context: str,
        baml_options: _baml.BamlCallOptions = {},
    ) -> List[_baml.types.Question]:
      options: _baml.BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      env = _baml.env_vars_to_dict(options.get("env", {}))
      raw = await self.__runtime.call_function(
        "GenerateQuestions",
        {
          "topic": topic,"expanded_context": expanded_context,
        },
        self.__ctx_manager.clone_context(),
        tb,
        __cr__,
        collectors,
        env,
      )
      return cast(List[_baml.types.Question], raw.cast_to(_baml.types, _baml.types, _baml.partial_types, False))
    
    async def GenerateTopics(
        self,
        expanded_context: str,
        baml_options: _baml.BamlCallOptions = {},
    ) -> List[str]:
      options: _baml.BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      env = _baml.env_vars_to_dict(options.get("env", {}))
      raw = await self.__runtime.call_function(
        "GenerateTopics",
        {
          "expanded_context": expanded_context,
        },
        self.__ctx_manager.clone_context(),
        tb,
        __cr__,
        collectors,
        env,
      )
      return cast(List[str], raw.cast_to(_baml.types, _baml.types, _baml.partial_types, False))
    
    async def InitialStepback(
        self,
        target_name: str,target_context: str,
        baml_options: _baml.BamlCallOptions = {},
    ) -> _baml.types.Stepback:
      options: _baml.BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      env = _baml.env_vars_to_dict(options.get("env", {}))
      raw = await self.__runtime.call_function(
        "InitialStepback",
        {
          "target_name": target_name,"target_context": target_context,
        },
        self.__ctx_manager.clone_context(),
        tb,
        __cr__,
        collectors,
        env,
      )
      return cast(_baml.types.Stepback, raw.cast_to(_baml.types, _baml.types, _baml.partial_types, False))
    
    async def SummarizeExa(
        self,
        question: str,search_results: _baml.types.ExaSearchResults,
        baml_options: _baml.BamlCallOptions = {},
    ) -> str:
      options: _baml.BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      env = _baml.env_vars_to_dict(options.get("env", {}))
      raw = await self.__runtime.call_function(
        "SummarizeExa",
        {
          "question": question,"search_results": search_results,
        },
        self.__ctx_manager.clone_context(),
        tb,
        __cr__,
        collectors,
        env,
      )
      return cast(str, raw.cast_to(_baml.types, _baml.types, _baml.partial_types, False))
    
    async def WriteReport(
        self,
        expanded_context: str,evidence_by_topic: Dict[str, List[_baml.types.EvidenceSnippet]],
        baml_options: _baml.BamlCallOptions = {},
    ) -> _baml.types.HtmlReport:
      options: _baml.BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      env = _baml.env_vars_to_dict(options.get("env", {}))
      raw = await self.__runtime.call_function(
        "WriteReport",
        {
          "expanded_context": expanded_context,"evidence_by_topic": evidence_by_topic,
        },
        self.__ctx_manager.clone_context(),
        tb,
        __cr__,
        collectors,
        env,
      )
      return cast(_baml.types.HtmlReport, raw.cast_to(_baml.types, _baml.types, _baml.partial_types, False))
    


class BamlStreamClient:
    __runtime: baml_py.BamlRuntime
    __ctx_manager: baml_py.BamlCtxManager
    __baml_options: _baml.BamlCallOptions
    def __init__(self, runtime: baml_py.BamlRuntime, ctx_manager: baml_py.BamlCtxManager, baml_options: Optional[_baml.BamlCallOptions] = None):
      self.__runtime = runtime
      self.__ctx_manager = ctx_manager
      self.__baml_options = baml_options or {}

    
    def AssessRisk(
        self,
        report_html: str,
        baml_options: _baml.BamlCallOptions = {},
    ) -> baml_py.BamlStream[Optional[str], str]:
      options: _baml.BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      env = _baml.env_vars_to_dict(options.get("env", {}))
      raw = self.__runtime.stream_function(
        "AssessRisk",
        {
          "report_html": report_html,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
        env,
      )

      return baml_py.BamlStream[Optional[str], str](
        raw,
        lambda x: cast(Optional[str], x.cast_to(_baml.types, _baml.types, _baml.partial_types, True)),
        lambda x: cast(str, x.cast_to(_baml.types, _baml.types, _baml.partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def EvaluateQuestion(
        self,
        question: _baml.types.Question,evidence: Optional[List[_baml.types.EvidenceSnippet]],expanded_context: str,topic: str,
        baml_options: _baml.BamlCallOptions = {},
    ) -> baml_py.BamlStream[_baml.partial_types.QuestionStatus, _baml.types.QuestionStatus]:
      options: _baml.BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      env = _baml.env_vars_to_dict(options.get("env", {}))
      raw = self.__runtime.stream_function(
        "EvaluateQuestion",
        {
          "question": question,
          "evidence": evidence,
          "expanded_context": expanded_context,
          "topic": topic,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
        env,
      )

      return baml_py.BamlStream[_baml.partial_types.QuestionStatus, _baml.types.QuestionStatus](
        raw,
        lambda x: cast(_baml.partial_types.QuestionStatus, x.cast_to(_baml.types, _baml.types, _baml.partial_types, True)),
        lambda x: cast(_baml.types.QuestionStatus, x.cast_to(_baml.types, _baml.types, _baml.partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def EvaluateTopic(
        self,
        topic: str,question_statuses: List[_baml.types.QuestionStatus],
        baml_options: _baml.BamlCallOptions = {},
    ) -> baml_py.BamlStream[_baml.partial_types.TopicStatus, _baml.types.TopicStatus]:
      options: _baml.BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      env = _baml.env_vars_to_dict(options.get("env", {}))
      raw = self.__runtime.stream_function(
        "EvaluateTopic",
        {
          "topic": topic,
          "question_statuses": question_statuses,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
        env,
      )

      return baml_py.BamlStream[_baml.partial_types.TopicStatus, _baml.types.TopicStatus](
        raw,
        lambda x: cast(_baml.partial_types.TopicStatus, x.cast_to(_baml.types, _baml.types, _baml.partial_types, True)),
        lambda x: cast(_baml.types.TopicStatus, x.cast_to(_baml.types, _baml.types, _baml.partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def GenerateQueries(
        self,
        question: _baml.types.Question,expanded_context: str,topic: str,previous_queries: Optional[List[str]],
        baml_options: _baml.BamlCallOptions = {},
    ) -> baml_py.BamlStream[List[Optional[str]], List[str]]:
      options: _baml.BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      env = _baml.env_vars_to_dict(options.get("env", {}))
      raw = self.__runtime.stream_function(
        "GenerateQueries",
        {
          "question": question,
          "expanded_context": expanded_context,
          "topic": topic,
          "previous_queries": previous_queries,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
        env,
      )

      return baml_py.BamlStream[List[Optional[str]], List[str]](
        raw,
        lambda x: cast(List[Optional[str]], x.cast_to(_baml.types, _baml.types, _baml.partial_types, True)),
        lambda x: cast(List[str], x.cast_to(_baml.types, _baml.types, _baml.partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def GenerateQuestions(
        self,
        topic: str,expanded_context: str,
        baml_options: _baml.BamlCallOptions = {},
    ) -> baml_py.BamlStream[List[_baml.partial_types.Question], List[_baml.types.Question]]:
      options: _baml.BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      env = _baml.env_vars_to_dict(options.get("env", {}))
      raw = self.__runtime.stream_function(
        "GenerateQuestions",
        {
          "topic": topic,
          "expanded_context": expanded_context,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
        env,
      )

      return baml_py.BamlStream[List[_baml.partial_types.Question], List[_baml.types.Question]](
        raw,
        lambda x: cast(List[_baml.partial_types.Question], x.cast_to(_baml.types, _baml.types, _baml.partial_types, True)),
        lambda x: cast(List[_baml.types.Question], x.cast_to(_baml.types, _baml.types, _baml.partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def GenerateTopics(
        self,
        expanded_context: str,
        baml_options: _baml.BamlCallOptions = {},
    ) -> baml_py.BamlStream[List[Optional[str]], List[str]]:
      options: _baml.BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      env = _baml.env_vars_to_dict(options.get("env", {}))
      raw = self.__runtime.stream_function(
        "GenerateTopics",
        {
          "expanded_context": expanded_context,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
        env,
      )

      return baml_py.BamlStream[List[Optional[str]], List[str]](
        raw,
        lambda x: cast(List[Optional[str]], x.cast_to(_baml.types, _baml.types, _baml.partial_types, True)),
        lambda x: cast(List[str], x.cast_to(_baml.types, _baml.types, _baml.partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def InitialStepback(
        self,
        target_name: str,target_context: str,
        baml_options: _baml.BamlCallOptions = {},
    ) -> baml_py.BamlStream[_baml.partial_types.Stepback, _baml.types.Stepback]:
      options: _baml.BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      env = _baml.env_vars_to_dict(options.get("env", {}))
      raw = self.__runtime.stream_function(
        "InitialStepback",
        {
          "target_name": target_name,
          "target_context": target_context,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
        env,
      )

      return baml_py.BamlStream[_baml.partial_types.Stepback, _baml.types.Stepback](
        raw,
        lambda x: cast(_baml.partial_types.Stepback, x.cast_to(_baml.types, _baml.types, _baml.partial_types, True)),
        lambda x: cast(_baml.types.Stepback, x.cast_to(_baml.types, _baml.types, _baml.partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def SummarizeExa(
        self,
        question: str,search_results: _baml.types.ExaSearchResults,
        baml_options: _baml.BamlCallOptions = {},
    ) -> baml_py.BamlStream[Optional[str], str]:
      options: _baml.BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      env = _baml.env_vars_to_dict(options.get("env", {}))
      raw = self.__runtime.stream_function(
        "SummarizeExa",
        {
          "question": question,
          "search_results": search_results,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
        env,
      )

      return baml_py.BamlStream[Optional[str], str](
        raw,
        lambda x: cast(Optional[str], x.cast_to(_baml.types, _baml.types, _baml.partial_types, True)),
        lambda x: cast(str, x.cast_to(_baml.types, _baml.types, _baml.partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def WriteReport(
        self,
        expanded_context: str,evidence_by_topic: Dict[str, List[_baml.types.EvidenceSnippet]],
        baml_options: _baml.BamlCallOptions = {},
    ) -> baml_py.BamlStream[_baml.partial_types.HtmlReport, _baml.types.HtmlReport]:
      options: _baml.BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      env = _baml.env_vars_to_dict(options.get("env", {}))
      raw = self.__runtime.stream_function(
        "WriteReport",
        {
          "expanded_context": expanded_context,
          "evidence_by_topic": evidence_by_topic,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
        env,
      )

      return baml_py.BamlStream[_baml.partial_types.HtmlReport, _baml.types.HtmlReport](
        raw,
        lambda x: cast(_baml.partial_types.HtmlReport, x.cast_to(_baml.types, _baml.types, _baml.partial_types, True)),
        lambda x: cast(_baml.types.HtmlReport, x.cast_to(_baml.types, _baml.types, _baml.partial_types, False)),
        self.__ctx_manager.get(),
      )
    


b = BamlAsyncClient(DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME, DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_CTX)

__all__ = ["b", "BamlCallOptions"]