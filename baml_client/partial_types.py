###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
import baml_py
from enum import Enum

from pydantic import BaseModel, ConfigDict

from typing_extensions import TypeAlias, Literal
from typing import Dict, Generic, List, Optional, TypeVar, Union

from . import types
from .types import Checked, Check

###############################################################################
#
#  These types are used for streaming, for when an instance of a type
#  is still being built up and any of its fields is not yet fully available.
#
###############################################################################

T = TypeVar('T')
class StreamState(BaseModel, Generic[T]):
    value: T
    state: Literal["Pending", "Incomplete", "Complete"]


class EvidenceSnippet(BaseModel):
    title: Optional[str] = None
    url: Optional[str] = None
    snippet: Optional[str] = None
    published_date: Optional[str] = None

class ExaResult(BaseModel):
    id: Optional[str] = None
    title: Optional[str] = None
    url: Optional[str] = None
    score: Optional[float] = None
    published_date: Optional[str] = None
    text: Optional[str] = None

class ExaSearchResults(BaseModel):
    query: Optional[str] = None
    num_results: Optional[int] = None
    results: List["ExaResult"]

class HtmlReport(BaseModel):
    html: Optional[str] = None

class Question(BaseModel):
    text: Optional[str] = None
    criticality: Optional[types.Criticality] = None

class QuestionStatus(BaseModel):
    question: Optional["Question"] = None
    label: Optional[types.QuestionLabel] = None
    rationale: Optional[str] = None
    evidence: Optional[List["EvidenceSnippet"]] = None

class Stepback(BaseModel):
    expanded_context: Optional[str] = None

class TopicStatus(BaseModel):
    topic: Optional[str] = None
    completion: Optional[types.TopicCompletion] = None
    rationale: Optional[str] = None
